package starter.stepdefinitions;import io.cucumber.datatable.DataTable;import io.cucumber.java.en.And;import io.cucumber.java.en.Then;import net.thucydides.core.annotations.Steps;import starter.pages.AdminPage;import java.util.List;import java.util.Map;public class AdminDefs {    @Steps    AdminPage adminPage;    @And("I select option {string} of {string} tab on admin page")    public void selectOptionOfTabOnAdminPage(String option, String tab) {        adminPage.select_option_of_tab_on_admin_page(option, tab);    }    @Then("I search product follow infomation below")    public void iSearchProductFollowInfomationBelow(DataTable dt) {        List<Map<String, String>> values = dt.asMaps(String.class, String.class);        for (Map<String, String> column : values) {            String product_name = column.get("Product name");            String category = column.get("Category");            String search_subcategories = column.get("Search subcategories");            String manufacturer = column.get("Manufacturer");            adminPage.input_product_name(product_name);            adminPage.select_category(category);            adminPage.select_subcategories(search_subcategories);            adminPage.select_manufacturer(manufacturer);            adminPage.click_on_search_button();        }    }    @Then("I should see the list product after searching displayed as below")    public void iShouldSeeTheListProductAfterSearchingDisplayedAsBelow(DataTable dt) {        List<Map<String, String>> values = dt.asMaps(String.class, String.class);        for (int i = 0; i < values.size(); i++) {            String product_name = values.get(i).get("Product name");            String sku = values.get(i).get("SKU");            String price = values.get(i).get("Price");            String stock_quantity = values.get(i).get("Stock quantity");            String published = values.get(i).get("Published");            adminPage.verifyProduct(i + 1, product_name);            adminPage.verifySKU(i + 1, sku);            adminPage.verifyPrice(i + 1, price);            adminPage.verifyQuantity(i + 1, stock_quantity);            adminPage.verifyPublished(i + 1, published);        }    }    @Then("I verify no result is found on search result")    public void iVerifyNoResultIsFoundOnSearchResult() {        adminPage.verifyNoResult();    }    @Then("I go directly to product SKU with value {string}")    public void iGoDirectlyToProductSKUWithValue(String SKU) {        adminPage.go_directly_with_SKU(SKU);    }    @And("I check Search area is displayed")    public void iCheckSearchAreaIsDisplayed() {        adminPage.check_collapse_icon();    }    @And("I verify navigate to product detail successfully with name product is {string}")    public void iVerifyNavigateToProductDetailSuccessfullyWithNameProductIs(String name) {        adminPage.verify_navigate_to_product_detail();        adminPage.verify_info_of_product(name);    }    @Then("I want to click button {string}")    public void iWantToClickButton(String button) {        adminPage.click_button_card_a(button);    }    @And("I input information to create new customer as below")    public void iInputInformationToCreateNewCustomerAsBelow(DataTable dt) {        List<Map<String, String>> values = dt.asMaps(String.class, String.class);        for (Map<String, String> column : values) {            String email = column.get("Email");            String password = column.get("Password");            String first_name = column.get("First name");            String last_name = column.get("Last name");            String gender = column.get("Gender");            String date_of_birth = column.get("Date of birth");            String company_name = column.get("Company name");            String customer_roles = column.get("Customer role");            String admin_comment = column.get("Admin comment");            adminPage.input_email_to_create_new_customer(email);            adminPage.input_password_to_create_new_customer(password);            adminPage.input_firstname_to_create_new_customer(first_name);            adminPage.input_lastname_to_create_new_customer(last_name);            adminPage.select_gender_to_create_new_customer(gender);            adminPage.input_dateOfBirth_to_create_new_customer(date_of_birth);            adminPage.input_company_to_create_new_customer(company_name);            adminPage.input_customer_role_to_create_new_customer(customer_roles);            adminPage.input_comment_to_create_new_customer(admin_comment);        }    }    @Then("I click button {string}")    public void i_click_button_with_btn(String button) {        adminPage.click_button_card_button(button);    }    @Then("I should see success message is displayed {string} in admin page")    public void iShouldSeeSuccessMessageIsDisplayedInAdminPage(String message) {        adminPage.verify_message_displayed_in_admin_page(message);    }    @And("I verify the information of customer as below")    public void iVerifyTheInformationOfCustomerAsBelow(DataTable dt) {        List<Map<String, String>> values = dt.asMaps(String.class, String.class);        for (Map<String, String> column : values) {            String email = column.get("Email");            String first_name = column.get("First name");            String last_name = column.get("Last name");            String date_of_birth = column.get("Date of birth");            String company_name = column.get("Company name");            String customer_roles = column.get("Customer role");            String admin_comment = column.get("Admin comment");            adminPage.verify_email_of_customer(email);            adminPage.verify_firstname_of_customer(first_name);            adminPage.verify_last_name_of_customer(last_name);            adminPage.verify_dateOfBirth_of_customer(date_of_birth);            adminPage.verify_company_of_customer(company_name);            adminPage.verify_customer_role_of_customer(customer_roles);            adminPage.verify_comment_of_customer(admin_comment);        }    }    @Then("I search customer follow information below")    public void iSearchCustomerFollowInformationBelow(DataTable dt) {        List<Map<String, String>> values = dt.asMaps(String.class, String.class);        for (Map<String, String> column : values) {            String email = column.get("Email");            String first_name = column.get("First name");            String last_name = column.get("Last name");            String company_name = column.get("Company");            String customer_roles = column.get("Customer roles");            adminPage.input_email_to_search_customer(email);            adminPage.input_first_name_to_search_customer(first_name);            adminPage.input_last_name_to_search_customer(last_name);            adminPage.input_company_name_to_search_customer(company_name);            adminPage.input_customer_roles_to_search_customer(customer_roles);            adminPage.click_on_search_customer_button();        }    }    @Then("I should see the list customers after searching displayed as below")    public void iShouldSeeTheListCustomersAfterSearchingDisplayedAsBelow(DataTable dt) {        List<Map<String, String>> values = dt.asMaps(String.class, String.class);        for (int i = 0; i<values.size(); i++){            String email = values.get(i).get("Email");            String name = values.get(i).get("Name");            String customer_roles = values.get(i).get("Customer roles");            String company_name = values.get(i).get("Company name");            adminPage.verify_email_of_customer_after_searching(i+1,email);            adminPage.verify_name_of_customer_after_searching(i+1,name);            adminPage.verify_customer_roles_of_customer_after_searching(i+1,customer_roles);            adminPage.verify_company_name_of_customer_after_searching(i+1,company_name);        }    }    @And("I click edit button")    public void iClickEditButton() {        adminPage.click_edit_customer_button();    }    @And("I check Customer info is displayed")    public void iCheckCustomerInfoIsDisplayed() {        adminPage.check_customer_info_displayed();    }    @Then("I want to delete the customer")    public void iWantToDeleteTheCustomer() {        adminPage.deleted_customer();    }}