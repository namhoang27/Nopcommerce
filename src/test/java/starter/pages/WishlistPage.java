package starter.pages;import org.junit.Assert;import org.slf4j.Logger;import org.slf4j.LoggerFactory;public class WishlistPage extends BasePage {    private static final Logger logger = LoggerFactory.getLogger(WishlistPage.class);    public void clickOptionButton(String option) {        String xpathBtn = "//div[@class='overview-buttons']//button[normalize-space()='" + option + "']";        $(xpathBtn).waitUntilClickable();        $(xpathBtn).click();        logger.info("Clicked on Button {}", option);    }    public void verifySKU(int i, String sku) {        $("(//span[@class='sku-number'])[" + i + "]").waitUntilVisible();        String actual = $("(//span[@class='sku-number'])[" + i + "]").getText();        logger.info("i= {}", i);        Assert.assertEquals(sku, actual);    }    public void verifyProduct(int i, String product) {        $("(//a[@class='product-name'])[" + i + "]").waitUntilVisible();        String actual = $("(//a[@class='product-name'])[" + i + "]").getText();        logger.info("i= {}", i);        Assert.assertEquals(product, actual);    }    public void verifyPrice(int i, String price) {        $("(//span[@class='product-unit-price'])[" + i + "]").waitUntilVisible();        String actual = $("(//span[@class='product-unit-price'])[" + i + "]").getText();        logger.info("i= {}", i);        Assert.assertEquals(price, actual);    }    public void verifyQuantity(int i, String quantity) {        $("(//input[@class='qty-input'])[" + i + "]").waitUntilVisible();        String actual = $("(//input[@class='qty-input'])[" + i + "]").getAttribute("value");        logger.info("i= {}", i);        Assert.assertEquals(quantity, actual);    }    public void verifyTotal(int i, String total) {        $("(//span[@class='product-subtotal'])[" + i + "]").waitUntilVisible();        String actual = $("(//span[@class='product-subtotal'])[" + i + "]").getText();        logger.info("i= {}", i);        Assert.assertEquals(total, actual);    }    public void clickOnURLforSharing() {        $(".share-link").waitUntilVisible();        $(".share-link").click();        logger.info("Clicked on URL share link {}", ".share-link");    }    public void verifyWishListOfUser(String user) {        $("div[class='page-title'] h1").waitUntilVisible();        String actualUser = $("div[class='page-title'] h1").getText();        Assert.assertEquals(actualUser, "Wishlist of " + user);    }    public void listProductToAction(String product, String checkbox) {        if (checkbox.equals("ADD TO CART")) {            String xPathList = "//a[normalize-space()='" + product + "']/ancestor::tr//input[@name='addtocart']";            $(xPathList).waitUntilClickable();            $(xPathList).click();            logger.info("Clicked on add to cart of product: {}", product);        }        if (checkbox.equals("REMOVE")) {            String xPathList = "//a[normalize-space()='" + product + "']/ancestor::tr//button[@class='remove-btn']";            $(xPathList).waitUntilClickable();            $(xPathList).click();            logger.info("Removed the product: {}", product);        }    }    public void clickOnOptionAtWistListPage(String option) {        $("//button[normalize-space()='" + option + "']").waitUntilClickable();        $("//button[normalize-space()='" + option + "']").click();        logger.info("Clicked on button {}", option);    }    public void verifyUserAtShoppingCartPage() {        waitABit(1000);        Assert.assertEquals(getTitle(), "nopCommerce demo store. Shopping Cart");        Assert.assertTrue($("//h1[normalize-space()='Shopping cart']").isDisplayed());        logger.info("At Shopping Cart page");    }    public void verifyProductIsNotDisplayed(String product) {        String xPathList = "//a[normalize-space()='" + product + "']";        Assert.assertTrue(getList(xPathList).isEmpty());        logger.info("Product is removed: {}", product);    }    public void verifyUserAtWishListPage() {        waitABit(1000);        Assert.assertEquals(getTitle(), "nopCommerce demo store. Wishlist");        Assert.assertTrue($("//h1[normalize-space()='Wishlist']").isDisplayed());        logger.info("At Wishlist page");    }    public void verify_message_is_displayed(String message) {        $("//div[@class='no-data']").waitUntilVisible();        Assert.assertEquals($("//div[@class='no-data']").getText(), message);        logger.info("Displayed message: {}", message);    }    public void verifyUserAtCompareProductPage() {        waitABit(1000);        Assert.assertEquals(getTitle(), "nopCommerce demo store. Compare Products");        Assert.assertTrue($("//h1[normalize-space()='Compare products']").isDisplayed());        logger.info("At Compare products page");    }    public void verifyNameProductCompare(int i, String name) {        $("(//tr[@class='product-name']//a)[" + i + "]").waitUntilVisible();        String actual = $("(//tr[@class='product-name']//a)[" + i + "]").getText();        logger.info("i= {}", i);        Assert.assertEquals(name, actual);    }    public void verifyPriceProductCompare(int i, String price) {        int j = i+1;        $("//tr[@class='product-price']//td[" + j + "]").waitUntilVisible();        String actual = $("//tr[@class='product-price']//td[" + j + "]").getText();        logger.info("i= {}", i);        Assert.assertEquals(price, actual);    }    public void verifyProductIsNotDisplayedAtCompareProduct(String product) {        String xPathList = "//tr[@class='product-name']//a[normalize-space()='" + product + "']";        Assert.assertTrue(getList(xPathList).isEmpty());        logger.info("Product is removed: {}", product);    }}